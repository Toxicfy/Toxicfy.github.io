<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://toxicfy.github.io/</id>
    <title>Fy的个人小站</title>
    <updated>2020-01-18T11:13:12.992Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://toxicfy.github.io/"/>
    <link rel="self" href="https://toxicfy.github.io/atom.xml"/>
    <logo>https://toxicfy.github.io/images/avatar.png</logo>
    <icon>https://toxicfy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Fy的个人小站</rights>
    <entry>
        <title type="html"><![CDATA[数据交互 -- Axios 的封装及 API 接口管理]]></title>
        <id>https://toxicfy.github.io/post/xiang-mu-axios-de-feng-zhuang-ji-api-jie-kou-guan-li</id>
        <link href="https://toxicfy.github.io/post/xiang-mu-axios-de-feng-zhuang-ji-api-jie-kou-guan-li">
        </link>
        <updated>2020-01-13T07:33:49.000Z</updated>
        <summary type="html"><![CDATA[<p>为了简化数据交互的代码以及后续代码的修改更新维护，在 <code>Vue</code> 项目中我们会需要对 axios 库进行进一步的封装并集中管理 api 数据请求；</p>
]]></summary>
        <content type="html"><![CDATA[<p>为了简化数据交互的代码以及后续代码的修改更新维护，在 <code>Vue</code> 项目中我们会需要对 axios 库进行进一步的封装并集中管理 api 数据请求；</p>
<!-- more -->
<blockquote>
<p>axios 本质还是 ajax，不过是为了解决 ajax 繁琐的请求方式以及更好的处理回调； axios 是由 ajax 和 promise 封装的 HTTP 库; 主要这几个部分说明项目中前后端数据交互的请求管理</p>
</blockquote>
<ul>
<li>配置和创建 axios 实例</li>
<li>请求及响应的处理 (transformRequest 可以修改传输的数据，validateStatus 用于决定那些状态会被 catch 捕获以便于处理)</li>
<li>api 接口的管理</li>
</ul>
<p>首先考虑在 <code>src</code> 文件目录下建立文件夹及文件夹 <code>api/http.js</code></p>
<p>我们代码的封装就在 http.js 内完成，为了防止 axios 被全局'污染'，我们通过创建 axios 实例和配置项开始；</p>
<h3 id="axios-封装">Axios 封装</h3>
<h4 id="区分环境-baseurl超时请求头格式修改">区分环境 baseURL/超时/请求头格式修改</h4>
<pre><code class="language-javascript">import axios from 'axios'
import qs from 'qs'

const service = axios.create{
    // 区分状态，更换不同的URL
    baseURL: process.env.NODE_ENV === 'production' ? 'productionUrl' : 'devUrl',
    // 设置超时时间
    timeOut: 10000,
}
// 设置post的请求头格式
service.defaults.headers.post['Content-Type'] =
  'application/x-www-form-urlencoded;charset=UTF-8';
</code></pre>
<h3 id="请求-响应处理-拦截器">请求、响应处理 (拦截器)</h3>
<ul>
<li><code>transformRequest</code> 允许在向服务器发送请求前，修改请求数据；<code>transformResponse</code> 在传递给 then/catch 前，允许修改响应数据</li>
<li>axios 提供了 <code>validateStatus</code> 属性，用于定义对于给定的<code>HTTP</code> 响应状态码是 <code>resolve</code> 或 <code>reject</code> promise。 这里提及但是可以不作修改，默认 <code>status &gt;= 200 &amp;&amp; status &lt; 300</code> , 其他状态均在 <code>onReject</code> 中进行处理；</li>
</ul>
<pre><code class="language-javascript">import router from '../router'

// 序列化数据请求
service.defaults.transformRequest = data =&gt; qs.stringify(data)

const backToLogin = () =&gt; {
  router.replace({ path: '/login' })
}

// 根据 status 生成 msg及操作
const handleErrStatus = status =&gt; {
  switch (status) {
    case 401:
      backToLogin()
      return '未授权，请重新登录'
    case 403:
      localStorage.removeItem('token')
      store.commit('clearToken')
      backToLogin()
      return '登录过期，请重新登录'
    case 404:
      return '请求的资源不存在'，
  }
  String(status).match(/^(5)/) &amp;&amp; return '服务端出错，请联系管理员'
}
</code></pre>
<pre><code class="language-javascript">// 提示
import { Toast } from 'vant'
const showMsg = msg =&gt;
  Toast({ message: msg, duration: 1000, forbidClick: true })

// 处理请求部分的拦截
service.interceptor.request.use(
  config =&gt; {
    // 获取并设置 token
    const token = store.state.token || localStorage.getItem('token')
    token &amp;&amp; (config.header.Authorization = token)
    return config
  },
  err =&gt; {
    Promise.error(err)
  }
)
// 处理数据的响应
service.interceptor.response.use(
  res =&gt; res,
  error =&gt; {
    const { response } = error
    // 如果有response，则说明该请求已发起，但是错误
    if (response) {
      // 全局提示
      showMsg(handleErrStatus(response.status))
      return Promise.resolve(response)
    }
    return Promise.reject(error)
  }
)
</code></pre>
<h3 id="api-的管理">Api 的管理</h3>
<p>为了避免重复的编写请求体以及集中管理，我们会对 get 及 post 请求做一次封装； 我们在 http.js 的同级下建立 api.js ;</p>
<p>先反过来，先确定我们想要怎样的调用形式，之后确定封装方式</p>
<pre><code class="language-javascript">//api
export const getDeviceList = data =&gt; get('api/Device/getDeviceList', data)
export const updateDevice = data =&gt; post('api/Device/updateDevice', data)
</code></pre>
<p>注： 当数据接口多的时候，使用模块化管理接口，api.js 为 api 集合的导出口, 而对应的模块内容参照如上所述的编写</p>
<pre><code class="language-javascript">// api.js
import funcModule1 from './funcModule1'
import funcModule2 from './funcModule2'

export default {
  funcModule1,
  funcModule2
}
</code></pre>
<p>如此，我们返回一个promise对象包裹：</p>
<pre><code class="language-javascript">// http.js
export const get = (url, params, config = {}) =&gt; {
  return new Promise((resolve, reject) =&gt; {
      service({
        methods: 'get',
        url,
        params
      })
        .then(res =&gt; resolve(res))
        .catch(err =&gt; reject(err))
  })
}
export const post = (url, data, config = {}) =&gt; {
  return new Promise((resolve, reject) =&gt; {
      service({
        methods: 'post',
        url,
        data
        ...config
      })
        .then(res =&gt; resolve(res))
        .catch(err =&gt; reject(err))
  })
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[书籍笔录  --《图解HTTP》]]></title>
        <id>https://toxicfy.github.io/post/shu-ji-zong-jie-tu-jie-http</id>
        <link href="https://toxicfy.github.io/post/shu-ji-zong-jie-tu-jie-http">
        </link>
        <updated>2019-10-09T02:42:04.000Z</updated>
        <summary type="html"><![CDATA[<p>工作打交道最多的还是浏览器，对于输入<code>URL</code>到页面呈现的步骤类似的文章其实也是看了不少，但是还是觉得差点什么；最后选了《图解HTTP》这本书，基本也覆盖了<code>HTTP</code>协议中的大部分内容，自己也进行了知识点提炼和总结，在这里记录一下；</p>
]]></summary>
        <content type="html"><![CDATA[<p>工作打交道最多的还是浏览器，对于输入<code>URL</code>到页面呈现的步骤类似的文章其实也是看了不少，但是还是觉得差点什么；最后选了《图解HTTP》这本书，基本也覆盖了<code>HTTP</code>协议中的大部分内容，自己也进行了知识点提炼和总结，在这里记录一下；</p>
<!-- more -->
<h2 id="uweb及网络基础u"><u>Web及网络基础</u></h2>
<p>Web 是建立在 <code>HTTP</code> 协议上通信的，而 <code>HTTP</code> 是 <code>TCP/IP</code> 协议族内部的一个子集。</p>
<h3 id="tcpip-协议族">📌<code>TCP/IP</code> 协议族</h3>
<p>为了满足不同的硬件、操作系统之间的通信，需要制定约束的规则，而这些规则也就称为<strong>协议</strong>；而 <code>TCP/IP</code> 指的是 <code>TCP</code> 和 <code>IP</code> 两种协议，也有说法是 <code>IP</code> 协议通信过程中，使用到的协议族的统称。</p>
<p><code>TCP/IP</code> 协议族是<strong>基于分层进行管理</strong>的，分层化的设计使得改动以及任务划分更加清晰；</p>
<figure data-type="image" tabindex="1"><img src="https://pic.superbed.cn/item/5d9da3b2451253d178933125.png" alt="TCP/IP分层" loading="lazy"></figure>
<p>在发送请求的时候，客户端在<strong>应用层</strong>（<code>HTTP</code>协议）发出一个请求，生成请求的<code>HTTP</code>报文，为了传输方便，在<strong>传输层</strong>（<code>TCP</code>协议）将获取到的报文切割成报文段转发给<strong>网络层</strong>（IP协议），搜索对方的地址后转发给<strong>链路层</strong>； 同样的服务器端按照倒序，直到服务端应用层接收重组出HTTP报文，请求才算接受完成。</p>
<h3 id="tcp的确保可靠性">📌TCP的确保可靠性</h3>
<p>相比较<code>UDP</code>为面向非连接的协议，<code>TCP</code>协议则是在发送数据前需要建立可靠的连接；通常<code>TCP</code>协议通过三次握手的策略以及<code>Flag</code>（<code>SYN</code>，<code>ACK</code>）标志来保证通信的可靠性。</p>
<figure data-type="image" tabindex="2"><img src="https://pic.superbed.cn/item/5d9daa02451253d178972142.png" alt="三次握手" loading="lazy"></figure>
<ul>
<li>发送端首先发送一个带 <code>SYN</code> 标志的数据包给对方</li>
<li>接收端收到后，回传一个带有 <code>SYN/ACK</code> 标志的数据包以示传达确认信息</li>
<li>最后，发送端再回传一个带 <code>ACK</code> 标志的数据包，代表“握手”结束</li>
</ul>
<p>若在握手过程中某个阶段莫名中断，<code>TCP 协议</code>会再次以相同的顺序发送相同的数据包。<br>
同时<code>TCP</code>协议可以提供字节流服务，这样当HTTP报文主体的数据较大的时候，更易于传输（例如：大图加载的时候是一块一块进行加载）</p>
<h3 id="ip协议-路由选择及数据传输">📌IP协议 - 路由选择及数据传输</h3>
<p>位于网络层的<code>IP</code>协议的主要作用就是各种数据包的传送；</p>
<p><code>IP</code>协议不提供可靠的传输服务，只是尽自己最大努力支付来传输数据包，可靠性由上层协议提供（<code>TCP</code>协议） <code>IP</code>协议也是一种无连接协议，事先不会建立会话；</p>
<h4 id="ip地址及mac地址">IP地址及MAC地址</h4>
<p><code>IP</code> 地址指明了节点被分配到的地址，<code>MAC</code> 地址是指网卡所属的固定地址。<code>IP</code> 地址可以和 <code>MAC</code> 地址进行配对</p>
<p>，依据<code>ARP</code>协议，可以通过<code>IP</code>地址反查出对应的<code>MAC</code>地址</p>
<h4 id="arp协议">ARP协议</h4>
<p><code>ARP</code> 同样也是网络层协议，<strong><u><em>可以通过目标主机的IP地址，查询解析目标主机的MAC地址</em></u></strong>；中转时利用下一站设备的MAC地址继续搜索下一个中转对象；</p>
<p>每台主机在自己的ARP缓存区中都有一个ARP列表，保存了是近期与自己有过通信的主机的IP地址和MAC地址之间的对应关系。在进行数据中转的时候，向本网段的所有主机发送一个携带IP地址的ARP请求数据包，收到后查询自己的IP地址，是否符合条件；</p>
<h2 id="http-协议及报文简述">HTTP 协议及报文简述</h2>
<p><code>HTTP</code> 协议规定在数据由客户端开始建立通信，而服务端没有获得请求之前不会进行响应，所以在一条通信线路来说，<code>HTTP</code> 协议可以明确区分哪一端是客户端，哪一端是服务端。</p>
<h3 id="http-协议的特性">📎HTTP 协议的特性</h3>
<ul>
<li>
<p><strong>无状态</strong></p>
<p><code>HTTP</code> 协议不会对请求和响应之间的状态做出保存，即：对于发送过的请求和响应不做持久化处理（这样的设计有利于快速的处理大量的事务），在 <code>HTTP</code> 1.1 中可以可以通过 <code>cookie</code> 进行管理状态满足业务需求</p>
</li>
<li>
<p><strong>持久连接</strong></p>
<p>在初始的 <code>HTTP</code> 协议中，每进行一次 <code>HTTP</code> 通信需要断开一次 <code>TCP</code> 连接，但请求包含多个图片的文档时候，会频繁断开 <code>TCP</code> 连接，所以在后期的版本中（1.0 部分及 1.1 之后）采用了持久连接的方法。 其特点是： 只要任意一端没有明确的提出断开连接则继续保持 <code>TCP</code> 的连接状态</p>
</li>
<li>
<p><strong>管线化</strong></p>
<p>因为持久连使得多数请求可以以管线化的方式进行发送请求，使得可以不用等待一个请求完成就可以继续发送，可以做到**<u>并行发送</u>**多个请求。 使用管线化的方式可以使得请求更快的结束，请求数目越多，时间差越明显；</p>
</li>
<li>
<p><strong>基于 <code>Cookie</code> 的状态管理</strong></p>
<p>由于 <code>HTTP</code> 协议为了减少服务器及内存的消耗被设计为无状态，但是各种业务中则需要保存登录状态等需求，于是引入了 <code>Cookie</code> 技术。</p>
<p><code>Cookie</code> 技术通过在请求和响应报文中写入 <code>cookie</code> 信息来控制客户端的状态。<code>Cookie</code> 会根据从服务器端发送的响应报文内的一个叫做 <code>Set-Cookie</code> 的首部字段信息，通知客户端保存 <code>Cookie</code>。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 <code>Cookie</code> 值后发送出去。</p>
<p>当在 <code>cookie</code> 中设置了 <code>HttpOnly</code> 属性，那么通过 js 脚本将无法读取到 <code>cookie</code> 信息，这样能有效的防止  <code>XSS</code> 攻击。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前后端协作 -- 基于 JWT 实现登录注册及鉴权]]></title>
        <id>https://toxicfy.github.io/post/vue-koa2-login-regisiter</id>
        <link href="https://toxicfy.github.io/post/vue-koa2-login-regisiter">
        </link>
        <updated>2019-07-19T06:05:40.000Z</updated>
        <summary type="html"><![CDATA[<p>因为公司的服务端是 <code>C#</code>, 之前快速开发的应用使用前后端耦合开发；由于目前项目已经前后端分离开发。<br>
这里通过一个基于 <strong><code>Vue全家桶</code> + <code>koa2</code> +<code>MongoDB</code></strong> 完成注册、登录功能并使用<code>token</code> 认证的方式进行权限控制，以便于了解前后端分离的数据交互</p>
]]></summary>
        <content type="html"><![CDATA[<p>因为公司的服务端是 <code>C#</code>, 之前快速开发的应用使用前后端耦合开发；由于目前项目已经前后端分离开发。<br>
这里通过一个基于 <strong><code>Vue全家桶</code> + <code>koa2</code> +<code>MongoDB</code></strong> 完成注册、登录功能并使用<code>token</code> 认证的方式进行权限控制，以便于了解前后端分离的数据交互</p>
 <!-- more -->
<h2 id="基本思路">基本思路</h2>
<blockquote>
<p>前端页面构建完成后，通过封装了拦截器的 <code>axios</code> 进行数据请求由 <code>koa2</code>提供的 <code>api</code> 接口。 注册完成后登录时，服务端进行数据校验后返回成功并携带 <code>token</code>，前端进行 <code>token</code> 的存储;</p>
</blockquote>
<blockquote>
<p>除了静态数据以及登录注册，其他接口的访问均需要 <code>Header</code> 携带 <code>token</code>值，以便于服务端进行 <code>token</code> 校验后返回需要的数据, 进而完成数据交互</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://ae01.alicdn.com/kf/HTB14xWWaKP2gK0jSZFo761uIVXaK.png" alt="" loading="lazy"></figure>
<h2 id="前端实现">前端实现</h2>
<hr>
<p>关于页面的实现数据提交获取以及 <code>Vuex</code> 的使用比较简单，这里不进行介绍；前端部分主要记录路由部分的控制和 <code>axios</code> 拦截的实现</p>
<h3 id="路由控制拦截">路由控制/拦截</h3>
<blockquote>
<p>实现方式</p>
</blockquote>
<ol>
<li>
<p>定义 <code>router</code> 路由配置里面的 <code>meta</code> 字段确定该路由需要<strong>登录权限</strong>；</p>
</li>
<li>
<p>通过 <code>vue-router</code> 提供的导航守卫完成我们需要的路由拦截 ，我们这里使用的是全局守卫的 <code>beforeEach</code>。</p>
<p>PS : <strong>导航守卫</strong>实际是对应的路由行为时触发时执行的钩子函数，我们可以通过 <code>next()</code> 方法阻止/改变此次路由行为；</p>
</li>
<li>
<p>路由在完成跳转前都是处于 <strong>waiting</strong> （等待）的状态，而在一个守卫里： <code>next()</code> 方法的调用便是为了 <code>resolve</code> 当前的钩子，当全部钩子执行完成，此时路由变为 <strong>confirmed</strong> （确认）状态</p>
</li>
</ol>
<pre><code class="language-javascript">import Vue from 'vue'
import Router from 'vue-router'
import Login from './views/user/Login'
import Register from './views/user/Register'
import Manage from './views/user/Manage'
import store from './store'

Vue.use(Router)

// 定义routes 配置
const routes = [
  {
    path: '/login',
    name: 'login',
    component: Login,
    meta: {
      title: '登录'
    }
  },
  {
    path: '/manage',
    name: 'manage',
    component: Manage,
    meta: {
      title: '管理',
      requireAuth: true //定义requireAuth字段确定该路由需要登录权限
    }
  },
  {
    path: '/register',
    name: 'register',
    component: Register,
    meta: {
      title: '注册'
    }
  }
]

const router = new Router({ routes })

//页面进行刷新后，重新赋值 store.user.token
if (localStorage.getItem('token')) {
  store.commit({
    type: 'SET_TOKEN',
    token: localStorage.getItem('token')
  })
}

// 页面跳转权限控制
router.beforeEach((to, from, next) =&gt; {
  // 页面需要登录权限
  if (to.meta.requireAuth) {
    if (store.getters.token) {
      next()
    } else {
      // token 无效，重定向到登录页
      Vue.prototype.$message({
        type: 'warning',
        message: '认证过期，需要重新登录'
      })
      next({
        path: '/login',
        query: { redirect: to.fullPath }
      })
    }
  } else {
    next()
  }
})

export default router
</code></pre>
<h2 id="axios-封装">Axios 封装</h2>
<blockquote>
<p>实现方式</p>
</blockquote>
<ul>
<li>使用 <code>axios</code> 的拦截器，统一处理所有<code>http</code>请求和响应；</li>
<li>在需要权限的部分，发起请求时候给 <code>Header</code> 添加 <code>token</code>，处理返回的信息时候，当返回 <code>401</code>未授权时候，信息清除并进行跳转</li>
</ul>
<pre><code class="language-javascript">import axios from 'axios'
import store from './store'
import * as type from './store/constant'
import router from './router'

axios.defaults.baseURL = 'http://localhost:3000/api/'
axios.defaults.headers['Content-Type'] = 'application/json'

// 添加请求拦截器
axios.interceptors.request.use(
  config =&gt; {
    // 如果存在token的话，则每个http header都加上
    if (localStorage.getItem('token')) {
      config.headers.Authorization = `Bearer ${store.getters.token}`
    }
    return config
  },
  err =&gt; {
    return Promise.reject(err)
  }
)

axios.interceptors.response.use(
  //在后端不直接抛出异常，而是返回对应的状态码，这样我们依旧在response部分进行处理
  response =&gt; {
    if (response.data &amp;&amp; response.data.status) {
      switch (response.data.status) {
        case 401:
          store.commit(type.REMOVE_TOKEN)
          const currentRouter = router.currentRoute.path
          currentRouter !== 'login' &amp;&amp;
            router.push({
              path: 'login'
            })
          break

        default:
          break
      }
    }
    return response
  },
  err =&gt; {
    return new Promise.reject(err.response.data)
  }
)

export default axios
</code></pre>
<h2 id="后端部分">后端部分</h2>
<p>后端部分实际上同样并不复杂，关于 <code>mongoose</code>的<code>model</code>的定义以及 <code>koa2</code> 与其的交互也是不打算挪列，主要描述 <code>Token</code> 的生成验证以及对应<code>koa2</code>的配合；</p>
<h3 id="jwt-认证">JWT 认证</h3>
<blockquote>
<p>实现方式</p>
</blockquote>
<ol>
<li>客户端登录页输入用户名密码，发送请求给后端 (使用的是明文，这个时候 <code>https</code> 就很重要了，sad~)</li>
<li>客户端 <code>koa2</code> 获取并解析到内容，密码使用 <code>bcrypt</code> 进行校验；如果符合，就下发一个 <code>token</code> 返回给客户端。否则返回验证错误信息。</li>
<li>登录成功后，客户端将<code>token</code>用使用<code>localStorage</code>,并赋值给<code>vuex</code>进行存储，之后要请求其他资源的时候，在请求头里带上这个<code>token</code>进行请求。</li>
<li>后端收到请求信息，先验证一下<code>token</code>是否有效，有效则下发请求的资源否则返回<code>401</code></li>
</ol>
<ul>
<li>使用<code>jsonwebtoken</code>完成<code>token</code>的创建以及编写验证<code>token</code>的中间件</li>
</ul>
<pre><code class="language-javascript">// createToken.js
const jwt = require('jsonwebtoken')
const { PRIVATE_KEY } = require('./key')

module.exports = id =&gt; {
  // jwt签发token，主体信息和秘钥是必须的
  const token = jwt.sign(
    {
      id,
      exp: Math.floor(Date.now() / 1000) + 60 * 60
    },
    PRIVATE_KEY
  )
  return token
}

// validateToken.js
const jwt = require('jsonwebtoken')
const { PRIVATE_KEY } = require('./key')
const User = require('../dbs/userModels').Users

module.exports = async (ctx, next) =&gt; {
  const authorization = ctx.get('Authorization')
  if (!authorization) {
    ctx.throw(401)
  }
  // jwt 验证
  jwt.verify(
    authorization.split(' ').pop(), // header Auth为空格分割的字符串
    PRIVATE_KEY,
    async (err, decoded) =&gt; {
      if (err) {
        ctx.throw(401) //有一个全局的错误处理中间件，处理后再发给前端
      } else {
        // 利用ctx作为数据传递，为了后续的koa2 中间件获取到_id
        ctx.id = decoded.id
      }
    }
  )
  await next()
}
</code></pre>
<ul>
<li><code>koa2</code> 提供用户的注册和登录逻辑<code>API</code>，如果需要使用<code>jwt</code>的验证，只需要在处理函数之前使用<code>validateToken</code>中间件进行处理即可</li>
</ul>
<pre><code class="language-javascript">const Router = require('koa-router')
const User = require('../dbs/userModels').Users
const createToken = require('../token/createToken')
const validateToken = require('../token/validateToken')
const router = new Router()

// 用户注册逻辑
router.post('/api/register', async ctx =&gt; {
  const { username, password } = ctx.request.body
  const isRegister = await User.find({ username })
  if (isRegister.length &gt; 0) {
    ctx.body = {
      code: -1,
      message: '该用户名已被注册'
    }
    return
  }
  const user = await User.create({
    username,
    password
  })
  if (user) {
    ctx.body = {
      message: '用户注册成功',
      code: 0
    }
  } else {
    ctx.body = {
      message: '用户注册失败，请重试',
      code: -1
    }
  }
})

// 用户登录逻辑
router.post('/api/login', async ctx =&gt; {
  const { username, password } = ctx.request.body
  // 验证用户是否存在
  const user = await User.findOne({ username })
  if (!user) {
    return (ctx.body = {
      message: '用户名不存在',
      code: -1
    })
  }
  // 验证密码 &amp;&amp; 生成token并下发
  const isPasswordValid = require('bcrypt').compareSync(password, user.password)
  if (isPasswordValid) {
    const token = createToken(user._id)
    ctx.body = {
      token: token,
      message: '登录成功',
      code: 0
    }
  }
})

module.exports = {
  router
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[项目维护 -- 历史违建处理模块]]></title>
        <id>https://toxicfy.github.io/post/historyIllegale</id>
        <link href="https://toxicfy.github.io/post/historyIllegale">
        </link>
        <updated>2019-05-09T08:26:58.000Z</updated>
        <summary type="html"><![CDATA[<p>这是项目维护期中需要添加的功能模块：其实可以算是在原有的系统上添加一个小型的管理系统了；这里从文件上传、iframe页面数据访问，数据渲染部分总结一下；</p>
]]></summary>
        <content type="html"><![CDATA[<p>这是项目维护期中需要添加的功能模块：其实可以算是在原有的系统上添加一个小型的管理系统了；这里从文件上传、iframe页面数据访问，数据渲染部分总结一下；</p>
<!-- more -->
<h1 id="数据渲染">数据渲染</h1>
<h3 id="地图区域线条绘制">地图区域线条绘制</h3>
<p>在编辑的时候从服务端请求到的点坐标集合在地图渲染，和新增共用一个地图； 但是操作逻辑不同，在新增是靠点击事件触发加载（第一次为加载，之后为显示隐藏），编辑需要直接渲染；</p>
<pre><code class="language-javascript">$('#historyIllegaleModal').modal('show');

$('#historyIllegaleModal').on('shown.bs.modal', e =&gt; {
  if (vm.state === 'Edit') {
    if (!viewer) {
      vm.initWebGl(); //初始加载
    }

    $.extend(vm.commitData, data); // 依据服务端进行数据替换
    vm.initChooseHistoryIllegaleArea(); // 显示 canvas 部分
      
    //加载完成的回调
    viewer.onEndFrame = () =&gt; { 
      if (historyIllegaleTableEditState) {
        drawMeshLine(data['XQWZ']); //调用绘制的方法
        historyIllegaleTableEditState = false; 
      }
    }
    historyIllegaleTableEditState = true; //先执行
  }
})
</code></pre>
<h3 id="卫片对比区域渲染">卫片对比区域渲染</h3>
<p>在触发卫片对比功能中中依据主页面选中需要渲染的类型，其中绘制行政区划部分（为文字标注和区域划分两个部分）;</p>
<figure data-type="image" tabindex="1"><img src="https://toxicfy.github.io//post-images/1557892099842.png" alt="process" loading="lazy"></figure>
<blockquote>
<p>构建标注图层</p>
</blockquote>
<pre><code class="language-javascript">  let shapeCommonConfig = {
    width: &quot;76px&quot;,
    height: &quot;24px&quot;,
    padding: &quot;0&quot;,
    borderRadius: &quot;2px&quot;,
    color: &quot;#ff0000&quot;,
    opacity: 1,
    backgroundColor: &quot;none&quot;,
    fontWeight: &quot;900&quot;,
  };

  let shapeArr = [streetShape, streetShapeRight, communityShape, communityShapeRight, jurisdictionShape, jurisdictionShapeRight];
  shapeArr.forEach((shapeArrItem, index) =&gt; {
    shapeArrItem = new CSS2DLabelLayer();  
    Object.assign(shapeArrItem.css2DStyle, shapeCommonConfig);
    index % 2 === 0 ? sceneRight.addCustomLayer(shapeArrItem) : sceneLeft.addCustomLayer(shapeArrItem);
  })
</code></pre>
<blockquote>
<p>利用数据集合渲染出边界线和其中的文字</p>
</blockquote>
<pre><code class="language-javascript">  // 边界线 &amp;&amp; 文字 添加
  CITY_SHAPE_DATA.forEach((ele, curNum) =&gt; {
    // 根据主页 props 确定 那些需要加载；
    let currentState = parent.document.querySelector(`#cityshapes${curNum}`).checked;
    if (!currentState) {
      return;
    }

    let sceneArr = [sceneRight, sceneLeft];
    for (let i = 0; i &lt; sceneArr.length; i++) {
      const item = sceneArr[i];
      var ftLayerPolygon = new tjh.ar.FeatureLayer(ele.url[0], &quot;&quot;, false, item.terrainLayers, item.globalOffset);
      ftLayerPolygon.loadAllOnce = true;
      // polygon
      ftLayerPolygon.regulator.isLoadFeature = true;// 是否加载矢量streetSurface
      ftLayerPolygon.regulator.requestNum = 10;// 每帧加载数量
      ftLayerPolygon.regulator.color.set(Number(ele.setColor[0]));// 矢量颜色
      ftLayerPolygon.regulator.opacity = (ele.type === &quot;community&quot;) ? 0.5 : 1;// 矢量透明度
      ftLayerPolygon.regulator.size = 3.0;
      // 矢量贴合方式--人工指定高层
      ftLayerPolygon.regulator.fitPattern = tjh.ar.FeatureLayer.FIT_PATTERN.FIT_TERRIAN_LOW;
      ftLayerPolygon.initMaterial();
      item.addFeatureLayer(ftLayerPolygon); //向其中添加边界线

      isRenderLabel = true; //触发封装库中的添加方法

      let textConfig = [
        { type: &quot;street&quot;, target: streetShape, target2: streetShapeRight },
        { type: &quot;community&quot;, target: communityShape, target2: communityShapeRight },
        { type: &quot;jurisdiction&quot;, target: jurisdictionShape, target2: jurisdictionShapeRight }
      ];
      textConfig.forEach(element =&gt; {
        if (ele.type === element.type) {
          let { target, target2 } = element;
          for (let num = 0; num &lt; ele.centerPosition.length; num++) {
            const { name, x, y } = ele.centerPosition[num];
            target.addLabel(null, name, new THREE.Vector3(x, y, 50));
            target2.addLabel(null, name, new THREE.Vector3(x, y, 50));
          }
        }
      });
    }
  });

</code></pre>
<h3 id="vue数据响应式更新">Vue数据响应式更新</h3>
<p>由于 Vue 是在初始化实例时，将实例属性执行<code>getter/settter</code>对于已经创建的<code>vue</code>实例不允许动态添加跟级别的相应式属性。因为这样不会触发变化的监控，所以视图的更新无法自动刷新；</p>
<blockquote>
<p>使用 <code>Vue.set</code> 或者 <code>vm.$set</code>运行时候进行动态添加；</p>
</blockquote>
<pre><code class="language-javascript">vm.$set(object,propertyName,value);// 适用于后端数据返回后处理成自己需要的属性集合
//eg: 向每个item添加自定义属性
this.posts =  res.map( item =&gt; {
    return { ...item, //somepropertyName }
})
</code></pre>
<blockquote>
<p>根节点数据初始化的时候全部添加</p>
</blockquote>
<pre><code class="language-javascript">data() {  // 当变量很多的时候，考虑分组后合并，避免混乱
  const userInfo = { //....
  };
  const config = { //....
  };
  return { ...userInfo, ...config, }
}
</code></pre>
<h1 id="文件上传">文件上传</h1>
<blockquote>
<p>在使用过程中涉及到 Post 请求用于上传文件，，使用 <code>FormData</code> 进行文件上传；</p>
</blockquote>
<pre><code class="language-html">&lt;!-- type=file 代表上传文件  --&gt;
&lt;!-- accept='' 代表上传文件限制，这里 .xls, .xlsx 代表限定为 excel类型 --&gt;
&lt;input type=&quot;file&quot; name=&quot;&quot;  id=&quot;&quot; accept=&quot;.xls, .xlsx&quot; &gt;
</code></pre>
<p><code>FormData</code> 对象用以将数据编译成键值对，以便用 <code>XMLHttpRequest</code> 来发送数据，其中如果表单 <code>enctype</code> 属性设为 <code>multipart/form-data</code> ，则会使用表单的 <code>submit()</code> 方法来发送数据；</p>
<pre><code class="language-javascript">var formData = new FormData();

formData.append(&quot;name&quot;, &quot;tom&quot;);
formData.append(&quot;num&quot;, 123); //数字123会被立即转换成字符串 &quot;123&quot;


// 在jq使用 - 设置不处理数据及内容类型即可
var formData = new FormData(document.querySelector(&quot;form&quot;));
formData.append(&quot;file&quot;, fileInputElement.files[0]);
$.ajax({
  url: &quot;stash.php&quot;,
  type: &quot;POST&quot;,
  data: formData,
  processData: false,  // 不处理数据
  contentType: false   // 不设置内容类型
  success(res){},
});

</code></pre>
<p>在 vue 模板配合 axios 使用如下：</p>
<pre><code class="language-html">&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;input id=&quot;fileinput&quot; @change=&quot;uploading($event)&quot; type=&quot;file&quot; accept=&quot;image/*&quot;&gt;
    &lt;button @click.prevent=&quot;submit()&quot;&gt;&lt;/button&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: &quot;#app&quot;,
  data() {
    return { file: &quot;&quot;, src: &quot;&quot; };
  },
  methods: {
    uploading(event) {
      this.file = event.target.files[0]; //获取文件
      var windowURL = window.URL || window.webkitURL;
      this.file = event.target.files[0];
      this.src = windowURL.createObjectURL(event.target.files[0]);//创建图片文件的url
    },

    submit() {
      let formdata = new FormData();
      formdata.append(&quot;file&quot;, this.file);
      let config = {//此处必须设置为  multipart/form-data
        headers: {
          &quot;Content-Type&quot;: &quot;multipart/form-data&quot; //之前说的以表单传数据的格式来传递fromdata
        }
      };

      this.$http.post(&quot;/upload&quot;, formData, config)
        .then(res =&gt; {
          //do something
        })
        .catch(error =&gt; {});
    }
  }
};
&lt;/script&gt;
</code></pre>
<h1 id="iframe页面数据访问">iframe页面数据访问</h1>
<blockquote>
<p>由于三维地图浏览功能和其他大部分逻辑无关，所以放置在一个新的 iframe 中进行业务逻辑编写； 但是数据获取传入以及调用，需要调用方法和给变量赋值；</p>
</blockquote>
<pre><code class="language-html">&lt;!-- parent.html --&gt;
&lt;div class='iframeContainer'&gt;
  &lt;iframe src='' id='myIframe'&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-javascript">//iframe.js
var testValue;  // 因为我们从主页面获取的是 window 对象，所以我们使用 var 声明变量，以便于直接进行获取；

function subFunction(){
  //do something
}


// parent.js
let childWindow = document.querySelector('#myIframe').contentWindows; //获取到子页面的 window 对象
childWindow.testValue = 'changed' ; //修改
childWindow.subFunction(); //执行子页面的方法


// 对于子页面访问父页面则是可以通过`parent`即可访问到；
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[项目总结 -- webAr建筑管理系统]]></title>
        <id>https://toxicfy.github.io/post/xiang-mu-zong-jie-webar-jian-zhu-guan-li-xi-tong</id>
        <link href="https://toxicfy.github.io/post/xiang-mu-zong-jie-webar-jian-zhu-guan-li-xi-tong">
        </link>
        <updated>2019-01-23T01:31:27.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>其实这里有点标题党的嫌疑，其实这个项目在一月初的时间已经完成了，因为是 <code>webAr</code> 项目的初始应用（没有使用打包工具和 cli ），加上业务逻辑很复杂，所以这里实际上是基于 <code>Vue-li</code>下对于项目的总结</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>其实这里有点标题党的嫌疑，其实这个项目在一月初的时间已经完成了，因为是 <code>webAr</code> 项目的初始应用（没有使用打包工具和 cli ），加上业务逻辑很复杂，所以这里实际上是基于 <code>Vue-li</code>下对于项目的总结</p>
</blockquote>
<!-- more --> 
<h3 id="错误-class-constructor-funname-cannot-be-invoked-without-new">错误 : <code>Class constructor FunName cannot be invoked without 'new'</code></h3>
<ul>
<li><strong>起由</strong>：直接调用的父类的时候无法使用子类继承，只能通过 <code>new</code> 的方式，即: 无法使用已转换的类扩展本机类</li>
<li><strong>方法</strong>：修改<code>.babelrc</code> - 排除 <code>transform-es2015-classes</code></li>
</ul>
<pre><code class="language-javascript">// &lt;!-- 参考：https://stackoverflow.com/questions/36577683/babel-error-class-constructor-foo-cannot-be-invoked-without-new --&gt;
presets: [
    [&quot;env&quot;, {
        exclude: [&quot;transform-es2015-classes&quot;]
    }]
]
</code></pre>
<h3 id="功能-添加-css2dlabel-进行场景的特殊标注">功能 : 添加 <code>css2DLabel</code> 进行场景的特殊标注</h3>
<ul>
<li><strong>起由</strong>: 添加 <code>css2D</code> 层 <code>canvas</code> 无法使用定义好的事件；</li>
<li><strong>方法</strong>：修改 <code>css2D</code> 的 <code>z-index</code> ，并需要传递已定义的事件</li>
</ul>
<pre><code class="language-javascript">is_render = true;

//初始化css2DRender &amp;&amp; Dom style
let css2DRender = new THREE.CSS2DRenderer(viewer);
initCSS2DRender(css2DRenderer);

// 赋值事件，添加Dom
css2DRender.domElement.ondbclick = () =&gt; {
    terrain.methods.dbFinishToolEvents
};
css2DRender.domElement.onclick = () =&gt; {
    terrain.methods.FinishToolEvents
};
document.getElementById(&quot;container&quot;).appendChild(css2DRenderer.domElement);

// 场景更新
viewer.onEndRenderTechnique = () =&gt; {
    if (is_render) {
        css2DRenderer.render(scene, camera)
    }
}
</code></pre>
<h3 id="关于-css2dlabellayer-的-addlabel-方法的改写">关于 <code>css2DLabelLayer</code> 的 <code>addLabel</code> 方法的改写:</h3>
<blockquote>
<p>通过 imgconfig 参数配置的传递生成 ImgIcon 部分</p>
</blockquote>
<pre><code class="language-javascript">// dom 添加 imgIcon
labelDiv.appendChild(getCSS2DIcon(imgconfig));

/**
 * 生成 ImgIcon
 * @param {Object} config - 用于生成 ImgIcon 的配置
 * @returns Image Dom
 */
function getCSS2DIcon(config) {
  let CSS2D_IMGCONFIG;
  config ? CSS2D_IMGCONFIG = config : CSS2D_IMGCONFIG = {
    src: '/static/img/position.gif',
    width: &quot;30px&quot;,
    height: &quot;40px&quot;,
    position: &quot;absolute&quot;,
    top: &quot;24px&quot;,
    left: &quot;32%&quot;
  };

  let imgIcon = new Image();
  imgIcon.src = CSS2D_IMGCONFIG.src;
  Object.assign(imgIcon.style, CSS2D_IMGCONFIG);

  return imgIcon;
}
</code></pre>
<pre><code class="language-javascript">//在创建css2DLayer的时：利用 dom 生成 cssLabel
let cssLabel = new THREE.CSS2DObject(labelDiv);
cssLabel.heightRatio = 5; // 设定 heightRatio (4-使用gif中心为旋转的点)
this.add(cssLabel);  //此处的this是 CSS2DLabelLayer 类
</code></pre>
<h3 id="功能在对canvas上进行事件监听的用于满足逻辑通常是工具类的自动关闭">功能：在对canvas上进行事件监听的用于满足逻辑（通常是工具类的自动关闭）</h3>
<pre><code class="language-javascript">//Html Dom
// &lt;canvas id=&quot;canvasView&quot; @click=&quot;finishToolsEvent&quot; @dblclick=&quot;dbFinishToolsEvent&quot;&gt;&lt;/canvas&gt;

//JS methods
finishToolsEvent(timeout = 300){
  if(this.clickTimer){
      window.clearTimeout(this.clickTimer)；
      this.clickTimer = null;
  }

  this.clickTimer = window.setTimeOut(() =&gt; {
    // do something single click
  },timeout)
}，
dbFinishToolsEvent(){
	if (this.clickTimer) {
    window.clearTimeout(this.clickTimer);
      this.clickTimer = null;
  }
  //do something dbclick
}
</code></pre>
<h3 id="功能-对于一些加载时间比较久的组件不希望功能切换的时候状态丢失">功能 : 对于一些加载时间比较久的组件，不希望功能切换的时候状态丢失；</h3>
<ul>
<li><strong>方法</strong>：使用<code>vue-router</code>的 <code>keep-alive</code> 保持加载完成的状态；</li>
</ul>
<pre><code class="language-java">//vue component
&lt;keep-alive&gt;
     &lt;router-view v-if='$router.meta.keep_alive'&gt;&lt;/router-view&gt;
&lt;/keep-alive&gt;
&lt;router-view v-if='!$router.meta.keep_alive'&gt;&lt;/router-view&gt;
</code></pre>
<pre><code class="language-javascript">// router/index.js
export default new Router({
    route: [{
        // ....   
        children: [{
            path: './SatelliteImgContrast',
            component: resolve =&gt; require(['@components/satelliteImgContrast'], resolve),
            meta: {
                title: 'xx',
                keep_alive: true
            }
        }]
    }]
})
</code></pre>
<h3 id="基于-vuex-的数据管理">基于 Vuex 的数据管理</h3>
<p>由于迁移了较多的功能，整个项目数据状态较多，使用了<code>Vuex</code>进行数据管理；</p>
<p><code>store</code> 在 <code>Vue-cli</code>的组织结构如下</p>
<pre><code>├── index.html
├── main.js
├── components
└── store
    ├── index.js          #  组装模块并导出 store
    ├── state.js          #  state (存储状态)
    ├── getters.js        #  getter (派生状态)
    ├── mutation-types.js #  constant (状态修改类型)
    ├── mutations.js      #  mutation (提交状态修改)
    ├── actions.js        #  action (异步操作 - 提交mutation)
</code></pre>
<p>可以提及一下的是：</p>
<ul>
<li><code>mutation-type.js</code> 是单独存放 <code>mutation</code> 的类型存在的，和 <code>mutation</code> 配合使用的</li>
</ul>
<p>Example：</p>
<pre><code class="language-javascript">// mutation-type.js
export const SET_ALLLAYER_DATA = &quot;SET_ALLLAYER_DATA&quot;;
export const DEL_DREWLAYER_DATA = &quot;DEL_DREWLAYER_DATA&quot;;

// mutation.js
import * as types from './mutation-type.js';

export default {
    [types.SET_ALLLAYER_DATA](state, {name, data}) {
        state.layerData[name] = data;
    },
    [types.DEL_DREWLAYER_DATA](state, uuid) {
        state.layerData.forEach((ele, i, arr) =&gt; {
            if (ele.uuid === uuid) arr.splice(index, 1)
        })
    }
}

</code></pre>
<ul>
<li><code>action</code> 提供异步操作，并提交 <code>mutation</code></li>
</ul>
<p><code>action</code> 第一个参数默认是和 <code>store</code> 具有相同参数属性的对象。实际上 <code>action</code> 不具有修改 <code>state</code> 的能力，依旧通过提交（触发）<code>mutation</code> 实现修改；</p>
<pre><code class="language-javascript">// store.dispatch(actionType)
// action.js
import * as types from './mutation-type.js';

export default {
  actionExample({ commit }, { uuid, name, data }) {
    commit(types.DEL_DREWLAYER_DATA, uuid);
    commit({ type: types.SET_ALLLAYER_DATA, name, data });
  }
};
</code></pre>
<ul>
<li>辅助函数 <code>mapState/mapGetters/mapMutations/mapActions</code></li>
</ul>
<p>当需要在组件中引用的方法或者属性较多的时候我们使用辅助函数帮助我们实现, 对象展开运算符把我们需要的属性和方法映射到到对应的父级（vue属性）；</p>
<pre><code class="language-javascript">// 几种不同的方式
import {mapGetters, mapMutations, mapActions} from 'vuex';
export default {
    computed: {
        ...mapGetters(['getLayerData','getDrawLayerData']),//名称与 state 的子节点名称相同时
        ...mapState({
          excavateData: state =&gt; state.excavate.data
        })
    },
    methods: {
        ...mapMutations({
            setData: 'SET_ALLLAYER_DATA',//另取一个名字，使用对象形式
            deleteDrawData: 'DEL_DREWLAYER_DATA'
        }),
        ...mapActions([ actionExample ])
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[项目总结 -- 智慧桥梁]]></title>
        <id>https://toxicfy.github.io/post/xiang-mu-zong-jie-zhi-hui-qiao-liang</id>
        <link href="https://toxicfy.github.io/post/xiang-mu-zong-jie-zhi-hui-qiao-liang">
        </link>
        <updated>2018-03-14T01:59:31.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>项目中总结出一些常见问题，顺便熟悉开发中出现的<code>API</code>；</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>项目中总结出一些常见问题，顺便熟悉开发中出现的<code>API</code>；</p>
</blockquote>
<!-- more --> 
<p>smartBridge's  tips：</p>
<h2 id="操作iframe后点击模型后出现的闪烁问题">操作iframe后点击模型后出现的闪烁问题</h2>
<blockquote>
<p>解决方法： 改变焦点事件</p>
</blockquote>
<ol>
<li>
<p>在模型队形的html上加入 <code>onmouseover=&quot;changeFocus()&quot;</code>；</p>
</li>
<li>
<p>js中定义并执行一个无意义的点击操作</p>
<pre><code class="language-javascript"> function changeFocus() {
    $('.test').click();
 }
</code></pre>
</li>
</ol>
<!-- more -->
<h2 id="视图中定位方法的实现">视图中定位方法的实现</h2>
<blockquote>
<p>需要定位到的位置坐标(x,y,z)</p>
</blockquote>
<pre><code class="language-javascript">function position(x, y, z) {
    var vec3 = VirtualRealityCtrl.UtilManager.CreateInstance(&quot;Vertex&quot;);//创建病害坐标;
    vec3.X = x;
    vec3.Y = y;
    vec3.Z = z;
    var normalview = VirtualRealityCtrl.ViewerManager.GetView(0);  //拿到标准视图对象
    normalview.SetPosition(vec3, 80, 1);//以标准视图的视角定位到视图的中心点（坐标，高度，过渡时间）
}
</code></pre>
<h2 id="植入模型后无法释放工具反复添加">植入模型后无法释放工具，反复添加</h2>
<blockquote>
<p>给定一个标识状态（目前不知道为什么加了就可以了）</p>
</blockquote>
<pre><code class="language-javascript">var flagModel = false;   //给定一个状态

{ 
  //模型添加触发事件
  flagModel = true;
  //获取到模型的url = ？？
  VirtualRealityCtrl.ToolManager.ActiveTool = 5;    //切换为点击事件
  VirtualRealityCtrl.attachEvent(&quot;ToolEvent&quot;, ToolEventAddModel); //ar注册事件
}

function ToolEventAddModel(id, type, data) {
    var obj = JSON.parse(data);
    if (flagModel) {
        AR.Tool.AddModel(url, obj[1]); //obj[1]是坐标信息集合
        flagModel = false;
    }
    if (obj.ID != &quot;&quot;) {
        VirtualRealityCtrl.ToolManager.ReleaseActiveTool(); //释放点击的状态
    }
}
</code></pre>
<h2 id="视图中添加模型非种植的一些操作">视图中添加&quot;模型&quot;（非种植的）一些操作</h2>
<blockquote>
<p>这里用智慧桥梁中的病害信息为例</p>
</blockquote>
<ul>
<li>创建</li>
</ul>
<blockquote>
<p>实际上病害的创建是创建文本模型</p>
</blockquote>
<pre><code class="language-javascript">var txt = VirtualRealityCtrl.ModelManager.CreateTextModelParam();
var vec3 = VirtualRealityCtrl.UtilManager.CreateInstance(&quot;Vertex&quot;);
vec3.X = x;
vec3.Y = y;
vec3.Z = z;
txt.Position = vec3;
txt.Text = t;
txt.ImagePath = basePath + imgUrl;
var mod = VirtualRealityCtrl.ModelManager.CreateTextModel(txt); //创建传感器说明
mod.ShowDirScreen = true;                                       //是否显示说明文字
VirtualRealityCtrl.LayerManager.ModelLayer.AddNode(mod);        //添加到展示层
arr.push({
    KeyId: item[i].KeyId,         //keyID是用于非文本模型操作的标识（依据此的请求等）
    ModId: mod.ID                 //mod.ID是获取该文本模型的标识
});
</code></pre>
<ul>
<li>删除</li>
</ul>
<blockquote>
<p>依赖于创建时三维视图中的唯一标识ID</p>
</blockquote>
<pre><code class="language-javascript">if (arr != null) {
    for (var i = 0; i &lt; arr.length; i++) {
        var model = VirtualRealityCtrl.LayerManager.GetModelNodeByID(arr[i].ModId);
        if (model != null) {
            VirtualRealityCtrl.LayerManager.ModelLayer.DeleteNode(model);
        }
    }
    arr = [];
}
</code></pre>
<ul>
<li>依据自定义<code>iD</code>字段请求</li>
</ul>
<blockquote>
<p>在注册事件中进行判断当前操作的文本模型是哪一个<code>mod.id</code>？？ 然后通过这个再拿到<code>keyId</code>发起网络请求</p>
</blockquote>
<pre><code class="language-javascript">VirtualRealityCtrl.attachEvent(&quot;ToolEvent&quot;, ToolEvents); //AR中的注册事件

function ToolEvents(id, type, data) {
  	var obj = JSON.parse(data); 
  	if (type == &quot;5&quot;) {
      	//其他操作
		$.ajax({
          type: &quot;GET&quot;,
          url: &quot;../data/JsonData/timeMachine.json&quot;,
          success: function (data) {
            //其他操作
          }
  	}
}
</code></pre>
<h2 id="绘制挡板面">绘制挡板（面）</h2>
<blockquote>
<p>思路：通过将工具<code>type=4</code>，调出绘面工具，然后在注册事件中拿到对应的点的坐标</p>
</blockquote>
<ul>
<li>拼接新的数组</li>
</ul>
<pre><code class="language-javascript">function ToolEvents(id, type, data) { 
  var obj = JSON.parse(data);//data为数组坐标合集
      if (type == &quot;4&quot;) {
          for (var i = 0; i &lt; obj.length; i++) {
              var tem = []
              if (i &lt; obj.length - 1) {
                  tem = [obj[i], obj[i + 1]]
              } else {
                  tem = [obj[i], obj[0]]
              }
              bottomPoint.push(tem)
          }
          VirtualRealityCtrl.ToolManager.ActiveTool = 0;
          drawFace();
   }
}
</code></pre>
<pre><code class="language-javascript">//当时出现的问题在于：创建的时候把pgParam、vec3放在了循环外面
function drawFace() {
  for (var i = 0; i &lt; bottomPoint.length; i++) {
      var pgParam = VirtualRealityCtrl.ModelManager.CreatePolygonModelParam(); //创建线面
      var vec3 = VirtualRealityCtrl.UtilManager.CreateInstance(&quot;Vertex&quot;);
      for (var j = 0; j &lt; bottomPoint[i].length; j++) {
          vec3.X = bottomPoint[i][j].X;
          vec3.Y = bottomPoint[i][j].Y;
          vec3.Z = bottomPoint[i][j].Z;
          pgParam.AddVertex(vec3);
      }
      var temArr = bottomPoint[i].reverse();
      for (var k = 0; k &lt; temArr.length; k++) { //坐标变换
          vec3.X = temArr[k].X;
          vec3.Y = temArr[k].Y;
          vec3.Z = temArr[k].Z + 5;
          pgParam.AddVertex(vec3);
      }
      pgParam.FillColor = 03333;      //添加其他属性
      pgParam.ShowSide = true;
      pgParam.SideColor = 03333;
      pgParam.SideWidth = 2;
      var plmodel = VirtualRealityCtrl.ModelManager.CreatePolygonModel(pgParam);
      plmodel.Transparency = 0.5;
      VirtualRealityCtrl.LayerManager.ModelLayer.AddNode(plmodel);//添加到场景中
      temArr = []; //清空临时数组
  }
  bottomPoint = [];
}
</code></pre>
<h2 id="vue-复选框的使用">vue 复选框的使用</h2>
<ul>
<li>
<p>单个复选框用于绑定布尔值</p>
<pre><code class="language-java">&lt;input type=&quot;checkbox&quot; id=&quot;&quot;  v-model=&quot;checked&quot;&gt;  &lt;!-- checked = &quot;true&quot; or &quot;false&quot; --&gt;
</code></pre>
</li>
<li>
<p>多个复选框用于绑定数组（传入value值入数组）</p>
<pre><code class="language-Java">&lt;input type=&quot;checkbox&quot; id=&quot;a&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot;&gt;
&lt;label for=&quot;a&quot;&gt;John&lt;/label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;b&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot;&gt;
&lt;label for=&quot;b&quot;&gt;Mike&lt;/label&gt;
&lt;!-- checkedNames为选中复选框的input对应value值的集合 --&gt;
</code></pre>
</li>
</ul>
<h2 id="ie11-下注册事件的兼容设置">IE11 下注册事件的兼容设置</h2>
<blockquote>
<p>Internet Explorer 11 默认情况下不支持 attachEvent 注册事件，需要在页面中修改默认兼容设置为IE10 才能使用 attachEvent 注册事件。 head中添加：</p>
</blockquote>
<pre><code class="language-java"> &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=10&quot; /&gt;
</code></pre>
]]></content>
    </entry>
</feed>